### Action to Deploy on VM

name: Deploy Monitoring stack

on:
  workflow_dispatch:
    inputs:
      enabled:
        required: false
        type: string
        description: 'Flag to enable the deploy'
        default: 'true'
      folder:
        description: 'Component'
        required: true
        default: 'monitoring'
        type: choice
        options:
          - backend
          - frontend
          - monitoring
      version:
        description: 'Tag'
        required: true
        type: string
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      enabled:
        required: true
        type: string
        default: false
      folder:
        required: true
        type: string
    secrets:
      VM_HOST:
        required: true
      VM_USERNAME:
        required: true
      VM_PRIVATE_KEY:
        required: true
      VM_PORT:
        required: true

jobs:

  Deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: prod
    if: inputs.enabled == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 #v4.1.7

      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 #v3.0.2
        id: changed-path
        with:
          filters: |
            helm:
              - 'monitoring/k8s/helm/**'

      - name: 'Update config maps in k8s'
        uses: appleboy/ssh-action@029f5b4aeeeb58fdfe1410a5d17f967dacf36262 #v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_PRIVATE_KEY }}
          port: ${{ secrets.VM_PORT }}
          fingerprint: ${{ secrets.HOST_FINGERPRINT }}
          # atm the config map updates are done in a manual push way. It will be replaced by some tool like FluxCD or ArgoCD
          script: |
            mkdir -p expenses-monitor/${{ inputs.folder }}/k8s && cd expenses-monitor/${{ inputs.folder }}/k8s
            wget -O andamento_generale_dashboard.json https://raw.githubusercontent.com/and-mora/expenses-monitor/master/monitoring/grafana/dashboards/andamento_generale_dashboard.json
            wget -O mese_corrente_dashboard.json https://raw.githubusercontent.com/and-mora/expenses-monitor/master/monitoring/grafana/dashboards/mese_corrente_dashboard.json
            wget -O ticket_welfare_dashboard.json https://raw.githubusercontent.com/and-mora/expenses-monitor/master/monitoring/grafana/dashboards/ticket_welfare_dashboard.json
            wget -O container_metrics.json https://raw.githubusercontent.com/and-mora/expenses-monitor/master/monitoring/grafana/dashboards/metrics/container_metrics.json
            wget -O node_metrics.json https://raw.githubusercontent.com/and-mora/expenses-monitor/master/monitoring/grafana/dashboards/metrics/node_metrics.json
            kubectl create configmap monitoring-grafana-dashboard-and-gen --from-file andamento_generale_dashboard.json -n monitoring -o yaml --dry-run=client | kubectl apply -f -
            kubectl label configmap monitoring-grafana-dashboard-and-gen grafana_dashboard=1 -n monitoring
            kubectl annotate configmap monitoring-grafana-dashboard-and-gen grafana_folder='expenses-monitor' -n monitoring
            kubectl create configmap monitoring-grafana-dashboard-mese-corrente --from-file mese_corrente_dashboard.json -n monitoring -o yaml --dry-run=client | kubectl apply -f -
            kubectl label configmap monitoring-grafana-dashboard-mese-corrente grafana_dashboard=1 -n monitoring
            kubectl annotate configmap monitoring-grafana-dashboard-mese-corrente grafana_folder='expenses-monitor' -n monitoring
            kubectl create configmap monitoring-grafana-dashboard-ticket-welfare --from-file ticket_welfare_dashboard.json -n monitoring -o yaml --dry-run=client | kubectl apply -f -
            kubectl label configmap monitoring-grafana-dashboard-ticket-welfare grafana_dashboard=1 -n monitoring
            kubectl annotate configmap monitoring-grafana-dashboard-ticket-welfare grafana_folder='expenses-monitor' -n monitoring
            kubectl create configmap monitoring-grafana-dashboard-node-metrics --from-file node_metrics.json -o yaml -n monitoring --dry-run=client | kubectl apply -f -
            kubectl label configmap monitoring-grafana-dashboard-node-metrics grafana_dashboard=1 -n monitoring
            kubectl annotate configmap monitoring-grafana-dashboard-node-metrics grafana_folder='metrics' -n monitoring
            kubectl create configmap monitoring-grafana-dashboard-container-metrics --from-file container_metrics.json -n monitoring -o yaml --dry-run=client | kubectl apply -f -
            kubectl label configmap monitoring-grafana-dashboard-container-metrics grafana_dashboard=1 -n monitoring
            kubectl annotate configmap monitoring-grafana-dashboard-container-metrics grafana_folder='metrics' -n monitoring

      - name: 'Deploy on k8s'
        uses: appleboy/ssh-action@029f5b4aeeeb58fdfe1410a5d17f967dacf36262 #v1.0.3
        if: steps.changed-path.outputs.helm == 'true'
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_PRIVATE_KEY }}
          port: ${{ secrets.VM_PORT }}
          fingerprint: ${{ secrets.HOST_FINGERPRINT }}
          # atm the config map updates are done in a manual push way. It will be replaced by some tool like FluxCD or ArgoCD
          script: |
            mkdir -p expenses-monitor/${{ inputs.folder }}/k8s && cd expenses-monitor/${{ inputs.folder }}/k8s
            wget -O Chart.yaml https://raw.githubusercontent.com/and-mora/expenses-monitor/${{ inputs.version }}/${{ inputs.folder }}/k8s/helm/Chart.yaml
            wget -O values.yaml https://raw.githubusercontent.com/and-mora/expenses-monitor/${{ inputs.version }}/${{ inputs.folder }}/k8s/helm/values.yaml
            wget -O app.yaml https://raw.githubusercontent.com/and-mora/expenses-monitor/master/monitoring/grafana/provisioning/plugins/app.yaml
            kubectl create configmap grafana-plugin-reporter-config --from-file app.yaml -n monitoring -o yaml --dry-run=client | kubectl apply -f -
            helm dependency build
            helm upgrade --install ${{ inputs.folder }} charts/* -f values.yaml --wait --timeout 300s -n monitoring

  DeployLoki:
    uses: ./.github/workflows/deploy_loki.yml
    secrets: inherit

  DeployTempo:
    uses: ./.github/workflows/deploy_tempo.yml
    secrets: inherit

  DeployOtelCollector:
    needs: [ DeployLoki, DeployTempo ]
    uses: ./.github/workflows/deploy_otel_collector.yml
    secrets: inherit
