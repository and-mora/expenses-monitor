logging {
        level  = "info"
        format = "logfmt"
}

discovery.kubernetes "nodes" {
        role = "node"
}

discovery.kubernetes "services" {
        role = "service"
}

discovery.kubernetes "endpoints" {
        role = "endpoints"
}

discovery.kubernetes "endpointslices" {
        role = "endpointslice"
}

discovery.kubernetes "ingresses" {
        role = "ingress"
}

discovery.kubernetes "pods" {
  role = "pod"
}

loki.source.kubernetes "pods" {
  targets    = discovery.kubernetes.pods.targets
  forward_to = [loki.write.local.receiver]
}

loki.write "local" {
  endpoint {
    url = "http://loki-gateway.monitoring.svc.cluster.local/loki/api/v1/push"
  }
}

// loki.source.kubernetes_events tails events from the Kubernetes API and converts them
// into log lines to forward to other Loki components.
loki.source.kubernetes_events "cluster_events" {
  job_name   = "integrations/kubernetes/eventhandler"
  log_format = "logfmt"
  forward_to = [
    loki.process.cluster_events.receiver,
  ]
}

// loki.process receives log entries from other loki components, applies one or more processing stages,
// and forwards the results to the list of receivers in the componentâ€™s arguments.
loki.process "cluster_events" {
  forward_to = [loki.write.local.receiver]

  stage.static_labels {
    values = {
      cluster = "production",
    }
  }

  stage.labels {
    values = {
      kubernetes_cluster_events = "job",
    }
  }
}

otelcol.receiver.otlp "default" {
  grpc {
    endpoint = "0.0.0.0:4317"
  }

  http {
    endpoint = "0.0.0.0:4318"
  }

  output {
    traces  = [otelcol.exporter.otlp.default.input]
  }
}

otelcol.exporter.otlp "default" {
  client {
    endpoint = "http://tempo.monitoring.svc.cluster.local"
  }
}